#!/usr/bin/python3
#!/Auther: @SirBagoza

# Modules Imports
import requests
import argparse
import subprocess
import os.path as path
import time
import sys
import os
import urllib.parse
from colorama import Fore, Back, Style

# Assigning Args
parser = argparse.ArgumentParser()
parser.add_argument("-l", "--lab", help="<URL> of the pentesterlab without addons")
parser.add_argument("-c", "--cookie", help="cookies of your pentesterlab account")
args = parser.parse_args()
Lab_URI = str(args.lab)
COOKIE_ = str(args.cookie)

# Viewing help on non usage
if str(args.lab) == "None" or str(args.cookie) == "None":
	os.system("python3 Auto_Pentesterlab_Solver.py -h")
	quit()

# This is the tool's logo
logo = """
                    _           _____       _                
         /\        | |         / ____|     | |               
        /  \  _   _| |_ ___   | (___   ___ | |_   _____ _ __ 
       / /\ \| | | | __/ _ \   \___ \ / _ \| \ \ / / _ \ '__|
      / ____ \ |_| | || (_) |  ____) | (_) | |\ V /  __/ |   
     /_/    \_\__,_|\__\___/  |_____/ \___/|_| \_/ \___|_|   
# ------------------------------------------------------------ #
        This Tool Is Made For Fun! Don't Cheat Bro xD <3
   Automatic Solver For "Code Review" Section In PentesterLab
           Author : Twitter@SirBagoza $ Github@sirbugs
              Made With Love & Coded By: Python3 <3
# ------------------------------------------------------------ #
"""

print(Fore.CYAN + logo)

headers = {
	'Cookie': COOKIE_,
	'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:106.0) Gecko/20100101 Firefox/106.0',
	'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
	'Upgrade-Insecure-Requests': '1',
	'Te': 'trailers',
}

# Main Request To Get Data
r = requests.get(Lab_URI+"/course", headers=headers).text
print(Fore.YELLOW + "[ => ] Target: " + Fore.MAGENTA + Lab_URI.replace('https://pentesterlab.com/', '') + "\n"); time.sleep(0.5)

# Detecting Code Language
print(Fore.YELLOW + "[ + ] Detecting Code Language .."); time.sleep(0.5)
if '<pre class="shadow"><code>' in r:
	patt = '<pre class="shadow"><code>'
else:
	patt = '<code class="'
Codes_Count = r.count(patt)
if Codes_Count != 1:
	Codes_Types_List = []
	_M = 1
	for II in range(Codes_Count):
		if '<code class="g' in r:
			Code_Type = r.split(patt)[_M].split('"')[0]
		else:
			Code_Type = Lab_URI.replace('https://pentesterlab.com/exercises/', ''); Code_Type = Code_Type.split("_")[0]
		print(Fore.YELLOW + "[ => ] Code " + Fore.CYAN + str(_M) + Fore.YELLOW + " Language: " + Fore.GREEN + Code_Type); time.sleep(0.5)
		Codes_Types_List.append(Code_Type)
		_M+=1
else:
	if '<code class="g' in r:
		Code_Type = r.split(patt)[_M].split('"')[0]
	else:
		Code_Type = Lab_URI.replace('https://pentesterlab.com/exercises/', ''); Code_Type = Code_Type.split("_")[0]
	print(Fore.YELLOW + "[ => ] Code Language: " + Fore.GREEN + Code_Type); time.sleep(0.5)

# Detecting File Name
print(Fore.YELLOW + "\n[ + ] Detecting File Name .."); time.sleep(0.5)
File_Names_Count = r.count('<input type="text" name="filename" id="filename" value="')
if File_Names_Count != 1:
	_A = 1
	Files_Names_List = []
	for II in range(File_Names_Count):
		#if 'display-9 text-uppercase l-space-half fw-bold">' in r:
		#	File_Name = r.split('display-9 text-uppercase l-space-half fw-bold">')[_A].split('<')[0]
		#else:
		#	File_Name = r.split('display-9 l-space-half fw-bold mb-1">')[_A].split('<')[0]
		File_Name = r.split('<input type="text" name="filename" id="filename" value="')[1].split('"')[0]
		print(Fore.YELLOW + "[ => ] File " + Fore.CYAN + str(_A) + Fore.YELLOW + " Name Detected " + Fore.GREEN + File_Name); time.sleep(0.5)
		Files_Names_List.append(File_Name)
		_A+=1
else:
	#if 'display-9 text-uppercase l-space-half fw-bold">' in r:
	#	File_Name = r.split('display-9 text-uppercase l-space-half fw-bold">')[1].split('<')[0]
	#else:
	#	File_Name = r.split('display-9 l-space-half fw-bold mb-1">')[1].split('<')[0]
	File_Name = r.split('<input type="text" name="filename" id="filename" value="')[1].split('"')[0]
	print(Fore.YELLOW + "[ => ] File Name Detected " + Fore.GREEN + File_Name); time.sleep(0.5)

# Detecting Code Area
print(Fore.YELLOW + "\n[ + ] Detecting Code Area .."); time.sleep(0.5)
if '<pre class="shadow"><code>' in r:
	patt = '<pre class="shadow"><code>'
	PATT_ = ""
else:
	patt = '<code class="'
	PATT_ ='<code class="'+Code_Type+'">'
Codes_Areas_Count = r.count(patt)
if Codes_Areas_Count != 1:
	Codes_Areas_List = []
	def get_specific_line(file_name, code):
		global Codes_Areas_List
		line = 1
		for linecode in code.split("\n"):
			pattern = str(line) + " Line : " + file_name + " - Line : " + linecode
			Codes_Areas_List.append(pattern)
			line+=1
	_M = 1
	B = 0
	for II in range(Codes_Areas_Count):
		Code_Area = r.split(PATT_)[_M].split('</code>')[0]
		A = 1
		for i in Code_Area.split("\n"): A+=1
		#print(Files_Names_List)
		get_specific_line(str(Files_Names_List[B]), Code_Area)
		print(Fore.YELLOW + "[ => ] Code " + Fore.CYAN + str(_M) + Fore.YELLOW + " Detected (" + Fore.GREEN + str(Files_Names_List[B]) + Fore.YELLOW + " - " + Fore.GREEN + str(A) + Fore.YELLOW + " Lines)!! "); time.sleep(0.5)
		A = 1
		_M+=1
		B+=1
else:
	Code = r.split(patt)[1].split('</code>')[0]
	Code_lines = []
	def get_specific_line(code):
		global Code_lines
		line = 1
		for linecode in code.split("\n"):
			pattern = str(line) + " File : " + File_Name + " - Bug : " + linecode
			Code_lines.append(pattern)
			line+=1
	get_specific_line(Code)
	print(Fore.YELLOW + "[ => ] Code Detected (" + Fore.GREEN + File_Name + Fore.YELLOW + " - " + Fore.GREEN + str(len(Code_lines)) + Fore.YELLOW + " Lines)!! "); time.sleep(0.5)

# Detecting Bug Types
print(Fore.YELLOW + "\n[ + ] Detecting Bug Types .."); time.sleep(0.5)
BugsArea = r.split('<option value="">Bug type</option>')[1].split('</select>')[0]
lBugs = []
def get_bug_types(src, BugsArea):
	global lBugs
	Bugs_Count = r.count('<option value="')
	_X = 2
	print(Fore.YELLOW + '[ => ] Detected ' + Fore.GREEN + str(Bugs_Count-1) + ' Bugs'); time.sleep(0.5)
	for bbug in range(Bugs_Count):
		Bugaya = src.split('<option value="')[_X].split('"')[0]
		pattern = Fore.YELLOW + "       => Bug : " + Fore.MAGENTA + str(Bugaya)
		print(pattern)
		lBugs.append(Bugaya)
		_X+=1
		if _X == Bugs_Count+1:
			break
get_bug_types(r, BugsArea)
print("\n")

# -------------------------------------------------------------------------------------------------------------- #

# Submitting Guesses
s = requests.Session()
req = s.get(Lab_URI+"/course", headers=headers).text
auth_token = req.split('<meta name="csrf-token" content="')[1].split('"')[0]
headers = {
	'Cookie': COOKIE_,
	'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:106.0) Gecko/20100101 Firefox/106.0',
	'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8',
	'Accept-Language': 'en-US,en;q=0.5',
	'Accept-Encoding': 'gzip, deflate',
	'Content-Type': 'application/x-www-form-urlencoded',
	'Content-Length': '222',
	'Origin': 'null',
	'Upgrade-Insecure-Requests': '1',
	'Sec-Fetch-Dest': 'document',
	'Sec-Fetch-Mode': 'navigate',
	'Sec-Fetch-Site': 'same-origin',
	'Sec-Fetch-User': '?1',
	'Te': 'trailers',
	'Connection': 'close'
}

#def Direct_Check_Answer():
#	global s, headers, data, Lab_URI, bug_type, code_line_no
#	while 1:
#		try:
#			r = s.post(Lab_URI+"/score_for_code_review", headers=headers, data=data)
#			if 'Too many attempt in a short period' in r.text:
#				# print("[ ! ] Block Is Detected, Sleeping 3 Seconds")
#				time.sleep(1)
#			elif 't have the right filename' in r.text:
#				print(Fore.WHITE + '[ X ] Submitted Wrong Answer (' + Fore.RED + code_line_no + Fore.WHITE + ') - (' + Fore.RED + bug_type + Fore.WHITE + ')')
#				time.sleep(1)
#				break
#			elif 'Next challenge in this badge' in r.text:
#				print(Fore.GREEN + "\n[ OK ] Challenge Solved Successfully!")
#				print(Fore.GREEN + "[ OK ] Bug Was In Line " + code_line_no + ", Bug: " + bug_type)
#				file = open("Pentesterlab_Solves.txt", "a+")
#				file.write(Lab_URI + " : Bug Was In Line: " + code_line_no + ", Bug: " + bug_type + "\n")
#				file.close()
#				quit()
#				break
#		except:
#			pass

try:
	Codes_Types_List
	Files_Names_List
	Codes_Areas_List
	print(Fore.YELLOW + "[ !! ] We Are In Multi Mode !!\n")
	for Bugaya in lBugs:
		for XII in Codes_Areas_List:
			Line_NO = XII.split(' Line : ')[0]
			FILE_NAME = XII.split('Line : ')[1].split(' - ')[0]
			data = "utf8=%E2%9C%93&authenticity_token="+urllib.parse.quote(auth_token)+"&filename="+FILE_NAME+"&line="+Line_NO+"&category="+Bugaya.replace(' ', '+')+"&commit=submit"
			#################################################
			while 1:
				try:
					r = s.post(Lab_URI+"/score_for_code_review", headers=headers, data=data)
					if 'Too many attempt in a short period' in r.text:
						# print("[ ! ] Block Is Detected, Sleeping 3 Seconds")
						time.sleep(1)
					elif 't have the right filename' in r.text:
						print(Fore.WHITE + '[ X ] Submitted Wrong Answer (' + Fore.RED + Line_NO + Fore.WHITE + ') - (' + Fore.RED + Bugaya + Fore.WHITE + ') => (' + Fore.RED + FILE_NAME + Fore.WHITE + ')')
						time.sleep(1)
						break
					elif 'Next challenge in this badge' in r.text:
						print(Fore.GREEN + "\n[ OK ] Challenge Solved Successfully!")
						print(Fore.GREEN + "[ OK ] Bug Was In Line " + Line_NO + ", Bug: " + Bugaya + ", File Name: " + FILE_NAME)
						file = open("Pentesterlab_Solves.txt", "a+")
						file.write(Lab_URI + " : Bug Was In Line: " + Line_NO + ", Bug: " + Bugaya + ", File Name: " + FILE_NAME + "\n")
						file.close()
						quit()
						break
				except:
					pass
			#################################################
except:
	for bug_type in lBugs:
		for code_line in Code_lines:
			code_line_no = code_line.split(" File :")[0]
			data = "utf8=%E2%9C%93&authenticity_token="+urllib.parse.quote(auth_token)+"&filename="+File_Name+"&line="+code_line_no+"&category="+bug_type.replace(' ', '+')+"&commit=submit"
			#################################################
			#global s, headers, data, Lab_URI, bug_type, code_line_no
			while 1:
				try:
					r = s.post(Lab_URI+"/score_for_code_review", headers=headers, data=data)
					if 'Too many attempt in a short period' in r.text:
						# print("[ ! ] Block Is Detected, Sleeping 3 Seconds")
						time.sleep(1)
					elif 't have the right filename' in r.text:
						print(Fore.WHITE + '[ X ] Submitted Wrong Answer (' + Fore.RED + code_line_no + Fore.WHITE + ') - (' + Fore.RED + bug_type + Fore.WHITE + ')')
						time.sleep(1)
						break
					elif 'Next challenge in this badge' in r.text:
						print(Fore.GREEN + "\n[ OK ] Challenge Solved Successfully!")
						print(Fore.GREEN + "[ OK ] Bug Was In Line " + code_line_no + ", Bug: " + bug_type)
						file = open("Pentesterlab_Solves.txt", "a+")
						file.write(Lab_URI + " : Bug Was In Line: " + code_line_no + ", Bug: " + bug_type + "\n")
						file.close()
						quit()
						break
				except:
					pass
			#################################################

